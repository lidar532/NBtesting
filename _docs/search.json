[
  {
    "objectID": "testlib.html",
    "href": "testlib.html",
    "title": "Testlib",
    "section": "",
    "text": "Use the comment below #| default_exp testlib to set the name of your exported python file.\nExport any imported modules that you need to use when the module is loaded.\nThe cell below is not exported. It is used to generate tests and docs for your module.\nThe cell below is for debugging purposes. Remove the #| export and rerun nbdev_export to remove it from your module.\nxxxx"
  },
  {
    "objectID": "testlib.html#init-code",
    "href": "testlib.html#init-code",
    "title": "Testlib",
    "section": "Init code",
    "text": "Init code\nRuns when module is loaded.\n\ndef test_a():\n\nsource\n\n\ntest_a\n\n test_a ()\n\n\n\ndef test_b():\n\nsource\n\n\ntest_b\n\n test_b ()\n\n\n\ndef test_widget(parent=None, CallBack_func=None ):\n\nsource\n\n\ntest_widget\n\n test_widget (parent=None, CallBack_func=None)"
  },
  {
    "objectID": "testlib.html#testing-code.",
    "href": "testlib.html#testing-code.",
    "title": "Testlib",
    "section": "Testing code.",
    "text": "Testing code.\n\n# Define a call back function for the test_widget.\ndef my_cb( value ):\n  print('my_cb:', value )\n\nr_w = pn.Row(\"A row\")\nw  = test_widget( CallBack_func = my_cb )\n\nw.servable()\nw\n\nmy_cb: /Docker\n\n\n\n  \n\n\n\n\n\nprint(w.Selected_Folder)\n\n/Docker\n\n\n\ndef my_cb( value ):\n  debug_w.value = value\n\ndebug_w = pn.widgets.StaticText(name=\"Debug\", value = 'not set')\ntb0 = nbw.TOGGLE_BUTTON(id='b1', on_name='0 Data On', off_name='0 Data off', change_cb=my_cb)\ntb1 = nbw.TOGGLE_BUTTON(id='b2', on_name='1 Data On', off_name='1 Data off', initial_state=1, change_cb=my_cb)\n\n\npn.Row(tb0.button, tb1.button, debug_w)\n\n\n\n\n\n  \n\n\n\n\n\ntb0.state, tb1.state\n\n(0, 1)"
  },
  {
    "objectID": "widgets.html",
    "href": "widgets.html",
    "title": "Widgets",
    "section": "",
    "text": "print('Debugging FolderSelector.ipynb')\n\nDebugging FolderSelector.ipynb\n\n\n\n\n\nsource\n\n\n\n\n FolderSelector (parent, initial_dir='/', CallBack_func=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nparent\n\n\nParent widget\n\n\ninitial_dir\nstr\n/\nDir to start in.\n\n\nCallBack_func\nNoneType\nNone\nFunction to call with selected folder.\n\n\nReturns\nobject\n\nThe folder selector object\n\n\n\n\n\n\n\npn.extension('floatpanel') \n\n# Optional Function to be called once 'Ok' or 'Cancel' buttons are pressed.\ndef My_callBack( v ):\n  debug_w.value = main_w.Selected_Folder\n\ndef Button_commands( event ):\n    w = FolderSelector( main_w, CallBack_func = My_callBack )\n\nb_w = pn.widgets.Button(name='Select Folder')\ndebug_w = pn.widgets.StaticText(name='Selected Folder:', value='nothing selected yet.')\nmain_w = pn.Row( \"Main\", b_w, debug_w )\nmain_w.Selected_Folder = None\nb_w.on_click( Button_commands )\n#display(main_w.servable())\n#main_w\nmain_w.servable()\ndisplay(main_w)\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nprint(main_w.Selected_Folder)\n\nNone\n\n\n\n\n\n\nsource\n\n\n\n\n TOGGLE_BUTTON (initial_state=0, id='', on_name='Data is On',\n                off_name='Data is Off', on_color='primary',\n                off_color='danger', change_cb=None)\n\nA panel toggle button with customizable properties. The button’s name and color is set according to the state of the button. If a user call back change_cb is given, it will be called each time the button is toggled. A list will be passed containing the id and the state of the button.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninitial_state\nint\n0\nThe initial button state upon creation.\n\n\nid\nstr\n\nAn identifier string.\n\n\non_name\nstr\nData is On\nMessage displayed on the button when in ON state\n\n\noff_name\nstr\nData is Off\nMessage displayed on button when in Off state\n\n\non_color\nstr\nprimary\nColor when ON\n\n\noff_color\nstr\ndanger\nColor when Off\n\n\nchange_cb\nNoneType\nNone\nAn optional user call back function called when toggled.\n\n\n\n\n# show_doc(TOGGLE_BUTTON)\n\n\ndef my_cb( value ):\n  debug_w.value = value\n\n\ndebug_w = pn.widgets.StaticText(name=\"Debug\", value = 'not set')\ntb0 = TOGGLE_BUTTON(id='b1', on_name='0 Data On', off_name='0 Data off', change_cb=my_cb)\ntb1 = TOGGLE_BUTTON(id='b2', on_name='1 Data On', off_name='1 Data off', initial_state=1, change_cb=my_cb)\n\n\npn.Row(tb0.button, tb1.button, debug_w)\n\n\n\n\n\n  \n\n\n\n\n\ntb0.state, tb1.state\n\n(0, 1)"
  },
  {
    "objectID": "widgets.html#globals",
    "href": "widgets.html#globals",
    "title": "Widgets",
    "section": "",
    "text": "print('Debugging FolderSelector.ipynb')\n\nDebugging FolderSelector.ipynb\n\n\n\n\n\nsource\n\n\n\n\n FolderSelector (parent, initial_dir='/', CallBack_func=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nparent\n\n\nParent widget\n\n\ninitial_dir\nstr\n/\nDir to start in.\n\n\nCallBack_func\nNoneType\nNone\nFunction to call with selected folder.\n\n\nReturns\nobject\n\nThe folder selector object\n\n\n\n\n\n\n\npn.extension('floatpanel') \n\n# Optional Function to be called once 'Ok' or 'Cancel' buttons are pressed.\ndef My_callBack( v ):\n  debug_w.value = main_w.Selected_Folder\n\ndef Button_commands( event ):\n    w = FolderSelector( main_w, CallBack_func = My_callBack )\n\nb_w = pn.widgets.Button(name='Select Folder')\ndebug_w = pn.widgets.StaticText(name='Selected Folder:', value='nothing selected yet.')\nmain_w = pn.Row( \"Main\", b_w, debug_w )\nmain_w.Selected_Folder = None\nb_w.on_click( Button_commands )\n#display(main_w.servable())\n#main_w\nmain_w.servable()\ndisplay(main_w)\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nprint(main_w.Selected_Folder)\n\nNone\n\n\n\n\n\n\nsource\n\n\n\n\n TOGGLE_BUTTON (initial_state=0, id='', on_name='Data is On',\n                off_name='Data is Off', on_color='primary',\n                off_color='danger', change_cb=None)\n\nA panel toggle button with customizable properties. The button’s name and color is set according to the state of the button. If a user call back change_cb is given, it will be called each time the button is toggled. A list will be passed containing the id and the state of the button.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninitial_state\nint\n0\nThe initial button state upon creation.\n\n\nid\nstr\n\nAn identifier string.\n\n\non_name\nstr\nData is On\nMessage displayed on the button when in ON state\n\n\noff_name\nstr\nData is Off\nMessage displayed on button when in Off state\n\n\non_color\nstr\nprimary\nColor when ON\n\n\noff_color\nstr\ndanger\nColor when Off\n\n\nchange_cb\nNoneType\nNone\nAn optional user call back function called when toggled.\n\n\n\n\n# show_doc(TOGGLE_BUTTON)\n\n\ndef my_cb( value ):\n  debug_w.value = value\n\n\ndebug_w = pn.widgets.StaticText(name=\"Debug\", value = 'not set')\ntb0 = TOGGLE_BUTTON(id='b1', on_name='0 Data On', off_name='0 Data off', change_cb=my_cb)\ntb1 = TOGGLE_BUTTON(id='b2', on_name='1 Data On', off_name='1 Data off', initial_state=1, change_cb=my_cb)\n\n\npn.Row(tb0.button, tb1.button, debug_w)\n\n\n\n\n\n  \n\n\n\n\n\ntb0.state, tb1.state\n\n(0, 1)"
  },
  {
    "objectID": "testlib2.html",
    "href": "testlib2.html",
    "title": "testlib2",
    "section": "",
    "text": "import sys\n\n\nsys.path\n\n['/home/wright/github-projects/NBtesting/nbs',\n '/home/wright/miniconda3/lib/python310.zip',\n '/home/wright/miniconda3/lib/python3.10',\n '/home/wright/miniconda3/lib/python3.10/lib-dynload',\n '',\n '/home/wright/miniconda3/lib/python3.10/site-packages',\n '/home/wright/github-projects/NBtesting']\n\n\n\nsource\n\ntest_lib2_a\n\n test_lib2_a (value='Nothing')\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nvalue\nstr\nNothing\nA simple string\n\n\nReturns\nstr\n\nthe input value\n\n\n\n\nsource\n\n\ntest_lib2_b\n\n test_lib2_b (value='no value')\n\n\nprint( test_lib2_a('junk') )\nprint( test_lib2_b( 'some string value.') )\n\ntest_lib2_a( junk)\ntest_lib2_b( some string value. )"
  },
  {
    "objectID": "95supersimplepaneltest.html",
    "href": "95supersimplepaneltest.html",
    "title": "Super Simple Panel Linkage Test.",
    "section": "",
    "text": "import panel as pn\npn.extension()\ni = 0\n\nbutton_w = pn.widgets.Button(name='Push me')\ntext_w   = pn.widgets.StaticText(name=\"Text:\", value=\"none yet\")\n\ndef clicked( event):\n    text_w.value = f'You clicked {event.obj.clicks} times'\n    \nwatcher = button_w.on_click( clicked )\nwidget = pn.Row(button_w, text_w)\nwidget.servable()\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n  \n\n\n\n\n\ni += 1\ntext_w.value = f\"You ran the cell {i} times.\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NBtesting",
    "section": "",
    "text": "import sys\nimport panel as pn\nimport NBtesting.testlib\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nVenv: /home/wright/miniconda3/envs/dss7\nPython search paths:\n   /home/wright/github-projects/NBtesting/nbs\n   /home/wright/miniconda3/envs/dss7/lib/python311.zip\n   /home/wright/miniconda3/envs/dss7/lib/python3.11\n   /home/wright/miniconda3/envs/dss7/lib/python3.11/lib-dynload\n   \n   /home/wright/miniconda3/envs/dss7/lib/python3.11/site-packages\nThis package contains modules wediges and testlib."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "NBtesting",
    "section": "Install",
    "text": "Install\nFor testing use:\npip install -e NBtesting\nFor operational use:\npip install NBtesting"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "NBtesting",
    "section": "How to use",
    "text": "How to use\nx\n\npn.extension('floatpanel')\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nx\n\nmy_w = NBtesting.testlib.test_widget()\n\nx\n\nmy_w.Selected_Folder = None\n\nx\n\nmy_w.servable()\n\n\n\n\n\n  \n\n\n\n\n\nprint(my_w.Selected_Folder)\n\nNone\n\n\n\nimport NBtesting as nbt\n\n\nnbt.__version__\n\n'0.0.6'"
  },
  {
    "objectID": "simplepaneltest.html",
    "href": "simplepaneltest.html",
    "title": "Simple Holoviz Panel Test",
    "section": "",
    "text": "Import the panel package as pn\n\nimport panel as pn\n\nNext, call the extension function so we can display the widgets in the notebook output.\n\npn.extension()\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nButton Test.\nNow, we define a simple function named clicked(event) to respond each time the button is pushed. The function simply reports the number of times the button was pushed. The widget takes the argument event object.clicks and creates a formatted string which it assignes to the t widgets value parameter.\n\ndef clicked( event):\n    t.value = f'clicked {event.obj.clicks} times'\n\nNow, we create a button widget named b, a StaticText widget named t. We assign the b button widget to call the clicked(event) function each time the button is pushed.\n\nb = pn.widgets.Button(name='Push me')\nt = pn.widgets.StaticText(name=\"Text:\", value=\"none yet\")\nwatcher = b.on_click( clicked )\n\nNow, we put the b Button and t widgets in a row together and name the row object w. Once the row object is created it can be displayed within Jupyter with the w.servable() when put in the first column on the last row.\n\nw = pn.Row(b,t)\nw.servable()\n\n\n\n\n\n  \n\n\n\n\nWe can also just assign a new string value to the StaticText value t.value directly by executing the following cell:\n\nt.value = 'Hello World XXXX !!'\nt\n\n\n\n\n\n  \n\n\n\n\nNote the Text widget’s value changes in two cells above.\n\nt.value = 'ssssss'"
  }
]