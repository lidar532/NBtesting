# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_widgets.ipynb.

# %% auto 0
__all__ = ['FolderSelector', 'TOGGLE_BUTTON']

# %% ../nbs/20_widgets.ipynb 3
import panel as pn
import sys

# %% ../nbs/20_widgets.ipynb 9
def FolderSelector( parent,              # Parent widget
                   initial_dir='/',      # Dir to start in.
                   CallBack_func = None  # Function to call with selected folder.
                  ) ->object:            # The folder selector object
    def button_handler(event):
      floatpanel.status = 'closed'
      
      if event.obj.name   == 'Ok':
        parent.Selected_Folder = file_w._directory.value  
      elif event.obj.name == 'Cancel':
        parent.Selected_Folder = None
        
      if CallBack_func != None:
        CallBack_func( [parent.Selected_Folder, event]  )

    file_w          = pn.widgets.FileSelector(initial_dir,     root_directory ='/', refresh_period=500)
    FolderSel_b    = pn.widgets.Button(name='Ok',     button_type='primary')
    folder_cancel_b = pn.widgets.Button(name='Cancel', button_type='primary')
    folder_w        = pn.WidgetBox(file_w, pn.Row(FolderSel_b, folder_cancel_b) )
    floatpanel      = pn.layout.FloatPanel(folder_w, name='Basic FloatPanel', margin=20, contained=False, position='center')
    floatpanel.Selected_Folder = None
    FolderSel_b.on_click(    button_handler )
    folder_cancel_b.on_click( button_handler )
    parent.append( floatpanel )
    return floatpanel

# %% ../nbs/20_widgets.ipynb 15
class TOGGLE_BUTTON:
  """
  A `panel` toggle button with customizable properties.  The button's name and
  color is set according to the state of the button. If a user call back `change_cb`
  is given, it will be called each time the button is toggled.  A list will be 
  passed containing the `id` and the `state` of the button.
  """
  def __init__(self, 
               initial_state = 0,              # The initial button state upon creation.
                          id = '',             # An identifier string.
                     on_name = 'Data is On',   # Message displayed on the button when in ON state
                    off_name = 'Data is Off',  # Message displayed on button when in Off state
                    on_color = 'primary',      # Color when ON
                   off_color = 'danger',       # Color when Off
                   change_cb = None,           # An optional user call back function called when toggled.
              ):
    self.initial_state  = initial_state
    self.id             = id
    self.state          = state  = initial_state
    self.change_cb      = change_cb
    self.name           = [1,2]
    self.color          = [1,2]
    self.cb             = [1,2]
    self.button_type    = [1,2]
    self.name[0]        = off_name
    self.color[0]       = off_color
    self.button_type[0] = 'danger'
    self.name[1]        = on_name
    self.color[1]       = on_color
    self.button_type[1] = 'primary'
    self.button = pn.widgets.Button(name = self.name[ state ] , button_type = self.button_type[state] )
    rv = self.button.on_click( self.toggle_cb )

  def toggle_cb(self, event):   # Execute this every time the button is pressed.
    if self.state == 0:
      self.state   = int(1)
    else:
      self.state   = int(0)
         
    state = self.state
    self.button.name    = self.name[state] 
    self.button.button_type = self.button_type[ state ]
    if self.change_cb:
      self.change_cb( [self.id, self.state] )
      
